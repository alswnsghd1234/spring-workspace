<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- @Controller와 같은 Annotation을 활성화 해주는 설정 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!--
		주소 자동 완성 도구
		매번 같은 주소(/WEB-INF/views/)를 추가해야하기 때문에 자동 완성이 등록되어 있음
		-view resolver 라는 도구 등록(spring 제공)
		-class : 패키지 경로를 포함한 view resolver의 풀 클래스명
		-prefix : 접두어 / suffix : 접미어 => return할 파일명 부분에 접두어와 접미어를 붙여서 요청
	-->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- base-package에 설정된 패키지와 하위 패키지를 감시해서 등록 가능한 도구(component)를 모두 찾아서 등록 -->
	<context:component-scan base-package="com.kh.spring" />
	<!--
		사용자가 어떤 url로 요청 시 문서가 읽히는지
		HandlerMapping을 통해서 어떤 url로 요청했을 때 어떤 controller를 구동할 것인지 일아내야함(해당 controller가 실행되도록)
		
		1. 요청때마다 실행될 controller 클래스들을 bean으로 등록
		<bean:bean class="com.kh.sping.member.LoginController" id="loginController"/>
		<bean:bean class="com.kh.sping.member.EnrollController" id="enrollController"/>
		
		2. 어떤 url로 요청들어온 것을 처리할 것인지 Mapping해야함
		<beans:bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"/>
			<beans:property name="mappings">
				<beans:prop key="login.me">loginController</beans:prop>
				<beans:prop key="insert.me">enrollController</beans:prop>
			</beans:property>
		</beans:bean>
	-->
	<!-- 
		위에 작성한 방식이 xml 방식
		-장점 : xml문서 내에서 한 눈에 볼 수 있기 때문에 관리의 편의성이 높음
		-단점 : bean 개수가 많아지면 관리가 더 어려워짐. 또한 여러 개발자가 같은 xml 파일을 수정하면 충돌이 발생할 수  있음
		
		Annotation 방식 
		-component-scan 에서 지정한 패키지명 하위의 모든 클래스를 스캔하여 @Controller와 같은 MVC Annotation이 붙은 클래스를 자동으로 bean 등록해주는 방식
		ex) @Service, @Repository, @Component
		
		단, 내가 직접 만든 클래스가 아닐 경우 컴파일된 class파일 형태로 배포되어 소스코드 내부를 볼 수 없고, 수정도 불가하기 때문에 코드상으로 Annotation을 붙일 수 없음
		이 경우에는 위에서 했던 xml 형식으로 bean 등록을 해야함
	-->
	
	<interceptors>
		<interceptor>
			<mapping path="/myPage.me"/>
			<mapping path="/update.me"/>
			<mapping path="/enrollForm.bo"/>
			<beans:bean class="com.kh.spring.common.interceptor.LoginInterceptor" id="loginInterceptor"/>
		</interceptor>
	</interceptors>
	
</beans:beans>
